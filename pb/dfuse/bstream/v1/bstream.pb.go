// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: dfuse/bstream/v1/bstream.proto

package pbbstream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ForkStep int32

const (
	ForkStep_STEP_UNKNOWN ForkStep = 0
	// Block is new head block of the chain, that is linear with the previous block
	ForkStep_STEP_NEW ForkStep = 1
	// Block is now forked and should be undone, it's not the head block of the chain anymore
	ForkStep_STEP_UNDO ForkStep = 2
	// Block is now irreversible and can be committed to (finality is chain specific, see chain documentation for more details)
	ForkStep_STEP_IRREVERSIBLE ForkStep = 4
)

// Enum value maps for ForkStep.
var (
	ForkStep_name = map[int32]string{
		0: "STEP_UNKNOWN",
		1: "STEP_NEW",
		2: "STEP_UNDO",
		4: "STEP_IRREVERSIBLE",
	}
	ForkStep_value = map[string]int32{
		"STEP_UNKNOWN":      0,
		"STEP_NEW":          1,
		"STEP_UNDO":         2,
		"STEP_IRREVERSIBLE": 4,
	}
)

func (x ForkStep) Enum() *ForkStep {
	p := new(ForkStep)
	*p = x
	return p
}

func (x ForkStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForkStep) Descriptor() protoreflect.EnumDescriptor {
	return file_dfuse_bstream_v1_bstream_proto_enumTypes[0].Descriptor()
}

func (ForkStep) Type() protoreflect.EnumType {
	return &file_dfuse_bstream_v1_bstream_proto_enumTypes[0]
}

func (x ForkStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForkStep.Descriptor instead.
func (ForkStep) EnumDescriptor() ([]byte, []int) {
	return file_dfuse_bstream_v1_bstream_proto_rawDescGZIP(), []int{0}
}

type BlockDetails int32

const (
	BlockDetails_BLOCK_DETAILS_FULL  BlockDetails = 0
	BlockDetails_BLOCK_DETAILS_LIGHT BlockDetails = 1
)

// Enum value maps for BlockDetails.
var (
	BlockDetails_name = map[int32]string{
		0: "BLOCK_DETAILS_FULL",
		1: "BLOCK_DETAILS_LIGHT",
	}
	BlockDetails_value = map[string]int32{
		"BLOCK_DETAILS_FULL":  0,
		"BLOCK_DETAILS_LIGHT": 1,
	}
)

func (x BlockDetails) Enum() *BlockDetails {
	p := new(BlockDetails)
	*p = x
	return p
}

func (x BlockDetails) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockDetails) Descriptor() protoreflect.EnumDescriptor {
	return file_dfuse_bstream_v1_bstream_proto_enumTypes[1].Descriptor()
}

func (BlockDetails) Type() protoreflect.EnumType {
	return &file_dfuse_bstream_v1_bstream_proto_enumTypes[1]
}

func (x BlockDetails) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockDetails.Descriptor instead.
func (BlockDetails) EnumDescriptor() ([]byte, []int) {
	return file_dfuse_bstream_v1_bstream_proto_rawDescGZIP(), []int{1}
}

type Protocol int32

const (
	Protocol_UNKNOWN    Protocol = 0
	Protocol_EOS        Protocol = 1
	Protocol_ETH        Protocol = 2
	Protocol_SOLANA     Protocol = 3
	Protocol_NEAR       Protocol = 4
	Protocol_TENDERMINT Protocol = 5
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "UNKNOWN",
		1: "EOS",
		2: "ETH",
		3: "SOLANA",
		4: "NEAR",
		5: "TENDERMINT",
	}
	Protocol_value = map[string]int32{
		"UNKNOWN":    0,
		"EOS":        1,
		"ETH":        2,
		"SOLANA":     3,
		"NEAR":       4,
		"TENDERMINT": 5,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_dfuse_bstream_v1_bstream_proto_enumTypes[2].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_dfuse_bstream_v1_bstream_proto_enumTypes[2]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_dfuse_bstream_v1_bstream_proto_rawDescGZIP(), []int{2}
}

// For historical segments, forks are not passed
type BlocksRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controls where the stream of blocks will start.
	//
	// The stream will start **inclusively** at the requested block num.
	//
	// When not provided, starts at first streamable block of the chain. Not all
	// chain starts at the same block number, so you might get an higher block than
	// requested when using default value of 0.
	//
	// Can be negative, will be resolved relative to the chain head block, assuming
	// a chain at head block #100, then using `-50` as the value will start at block
	// #50. If it resolves before first streamable block of chain, we assume start
	// of chain.
	//
	// If `start_cursor` is passed, this value is ignored and the stream instead starts
	// immediately after the Block pointed by the opaque `start_cursor` value.
	StartBlockNum int64 `protobuf:"varint,1,opt,name=start_block_num,json=startBlockNum,proto3" json:"start_block_num,omitempty"`
	// Controls where the stream of blocks will start which will be immediately after
	// the Block pointed by this opaque cursor.
	//
	// Obtain this value from a previously received BlockResponseV2.cursor.
	//
	// This value takes precedence over `start_block_num`.
	StartCursor string `protobuf:"bytes,13,opt,name=start_cursor,json=startCursor,proto3" json:"start_cursor,omitempty"`
	// When non-zero, controls where the stream of blocks will stop.
	//
	// The stream will close **after** that block has passed so the boundary is
	// **inclusive**.
	StopBlockNum uint64 `protobuf:"varint,5,opt,name=stop_block_num,json=stopBlockNum,proto3" json:"stop_block_num,omitempty"`
	// Filter the steps you want to see. If not specified, defaults to all steps.
	//
	// Most common steps will be [STEP_IRREVERSIBLE], or [STEP_NEW, STEP_UNDO, STEP_IRREVERSIBLE].
	ForkSteps []ForkStep `protobuf:"varint,8,rep,packed,name=fork_steps,json=forkSteps,proto3,enum=dfuse.bstream.v1.ForkStep" json:"fork_steps,omitempty"`
	// The CEL filter expression used to include transactions, specific to the target protocol,
	// works in combination with `exclude_filter_expr` value.
	IncludeFilterExpr string `protobuf:"bytes,10,opt,name=include_filter_expr,json=includeFilterExpr,proto3" json:"include_filter_expr,omitempty"`
	// The CEL filter expression used to exclude transactions, specific to the target protocol, works
	// in combination with `include_filter_expr` value.
	ExcludeFilterExpr string `protobuf:"bytes,11,opt,name=exclude_filter_expr,json=excludeFilterExpr,proto3" json:"exclude_filter_expr,omitempty"`
	// **Warning** Experimental API, controls how blocks are trimmed for extraneous information before
	// being sent back. The actual trimming is chain dependent.
	Details BlockDetails `protobuf:"varint,15,opt,name=details,proto3,enum=dfuse.bstream.v1.BlockDetails" json:"details,omitempty"`
	// controls how many confirmations will consider a given block as final (STEP_IRREVERSIBLE). Warning, if any reorg goes beyond that number of confirmations, the request will stall forever
	Confirmations uint64 `protobuf:"varint,16,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
}

func (x *BlocksRequestV2) Reset() {
	*x = BlocksRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksRequestV2) ProtoMessage() {}

func (x *BlocksRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksRequestV2.ProtoReflect.Descriptor instead.
func (*BlocksRequestV2) Descriptor() ([]byte, []int) {
	return file_dfuse_bstream_v1_bstream_proto_rawDescGZIP(), []int{0}
}

func (x *BlocksRequestV2) GetStartBlockNum() int64 {
	if x != nil {
		return x.StartBlockNum
	}
	return 0
}

func (x *BlocksRequestV2) GetStartCursor() string {
	if x != nil {
		return x.StartCursor
	}
	return ""
}

func (x *BlocksRequestV2) GetStopBlockNum() uint64 {
	if x != nil {
		return x.StopBlockNum
	}
	return 0
}

func (x *BlocksRequestV2) GetForkSteps() []ForkStep {
	if x != nil {
		return x.ForkSteps
	}
	return nil
}

func (x *BlocksRequestV2) GetIncludeFilterExpr() string {
	if x != nil {
		return x.IncludeFilterExpr
	}
	return ""
}

func (x *BlocksRequestV2) GetExcludeFilterExpr() string {
	if x != nil {
		return x.ExcludeFilterExpr
	}
	return ""
}

func (x *BlocksRequestV2) GetDetails() BlockDetails {
	if x != nil {
		return x.Details
	}
	return BlockDetails_BLOCK_DETAILS_FULL
}

func (x *BlocksRequestV2) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

type BlockResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain specific block payload, one of:
	// - dfuse.eosio.codec.v1.Block
	// - dfuse.ethereum.codec.v1.Block
	// - sf.near.codec.v1.Block
	// - sf.solana.codec.v1.Block
	Block  *anypb.Any `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Step   ForkStep   `protobuf:"varint,6,opt,name=step,proto3,enum=dfuse.bstream.v1.ForkStep" json:"step,omitempty"`
	Cursor string     `protobuf:"bytes,10,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *BlockResponseV2) Reset() {
	*x = BlockResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponseV2) ProtoMessage() {}

func (x *BlockResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponseV2.ProtoReflect.Descriptor instead.
func (*BlockResponseV2) Descriptor() ([]byte, []int) {
	return file_dfuse_bstream_v1_bstream_proto_rawDescGZIP(), []int{1}
}

func (x *BlockResponseV2) GetBlock() *anypb.Any {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockResponseV2) GetStep() ForkStep {
	if x != nil {
		return x.Step
	}
	return ForkStep_STEP_UNKNOWN
}

func (x *BlockResponseV2) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type Cursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block     *BlockRef `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	HeadBlock *BlockRef `protobuf:"bytes,2,opt,name=head_block,json=headBlock,proto3" json:"head_block,omitempty"`
	Lib       *BlockRef `protobuf:"bytes,3,opt,name=lib,proto3" json:"lib,omitempty"`
	Step      ForkStep  `protobuf:"varint,4,opt,name=step,proto3,enum=dfuse.bstream.v1.ForkStep" json:"step,omitempty"`
}

func (x *Cursor) Reset() {
	*x = Cursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cursor) ProtoMessage() {}

func (x *Cursor) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cursor.ProtoReflect.Descriptor instead.
func (*Cursor) Descriptor() ([]byte, []int) {
	return file_dfuse_bstream_v1_bstream_proto_rawDescGZIP(), []int{2}
}

func (x *Cursor) GetBlock() *BlockRef {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Cursor) GetHeadBlock() *BlockRef {
	if x != nil {
		return x.HeadBlock
	}
	return nil
}

func (x *Cursor) GetLib() *BlockRef {
	if x != nil {
		return x.Lib
	}
	return nil
}

func (x *Cursor) GetStep() ForkStep {
	if x != nil {
		return x.Step
	}
	return ForkStep_STEP_UNKNOWN
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number         uint64                 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Id             string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PreviousId     string                 `protobuf:"bytes,3,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LibNum         uint64                 `protobuf:"varint,5,opt,name=lib_num,json=libNum,proto3" json:"lib_num,omitempty"`
	PayloadKind    Protocol               `protobuf:"varint,6,opt,name=payload_kind,json=payloadKind,proto3,enum=dfuse.bstream.v1.Protocol" json:"payload_kind,omitempty"`
	PayloadVersion int32                  `protobuf:"varint,7,opt,name=payload_version,json=payloadVersion,proto3" json:"payload_version,omitempty"`
	PayloadBuffer  []byte                 `protobuf:"bytes,8,opt,name=payload_buffer,json=payloadBuffer,proto3" json:"payload_buffer,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_dfuse_bstream_v1_bstream_proto_rawDescGZIP(), []int{3}
}

func (x *Block) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Block) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Block) GetPreviousId() string {
	if x != nil {
		return x.PreviousId
	}
	return ""
}

func (x *Block) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Block) GetLibNum() uint64 {
	if x != nil {
		return x.LibNum
	}
	return 0
}

func (x *Block) GetPayloadKind() Protocol {
	if x != nil {
		return x.PayloadKind
	}
	return Protocol_UNKNOWN
}

func (x *Block) GetPayloadVersion() int32 {
	if x != nil {
		return x.PayloadVersion
	}
	return 0
}

func (x *Block) GetPayloadBuffer() []byte {
	if x != nil {
		return x.PayloadBuffer
	}
	return nil
}

type BlockRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num uint64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BlockRef) Reset() {
	*x = BlockRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRef) ProtoMessage() {}

func (x *BlockRef) ProtoReflect() protoreflect.Message {
	mi := &file_dfuse_bstream_v1_bstream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRef.ProtoReflect.Descriptor instead.
func (*BlockRef) Descriptor() ([]byte, []int) {
	return file_dfuse_bstream_v1_bstream_proto_rawDescGZIP(), []int{4}
}

func (x *BlockRef) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BlockRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_dfuse_bstream_v1_bstream_proto protoreflect.FileDescriptor

var file_dfuse_bstream_v1_bstream_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2f, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd,
	0x02, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x32, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x38,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x56, 0x32, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64,
	0x66, 0x75, 0x73, 0x65, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xd3, 0x01, 0x0a, 0x06, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2e,
	0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x66, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c,
	0x0a, 0x03, 0x6c, 0x69, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x66,
	0x75, 0x73, 0x65, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x03, 0x6c, 0x69, 0x62, 0x12, 0x2e, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x66, 0x75,
	0x73, 0x65, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0xb2, 0x02, 0x0a,
	0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x62,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x69, 0x62, 0x4e,
	0x75, 0x6d, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x66, 0x75, 0x73, 0x65,
	0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x22, 0x2c, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a,
	0x5c, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x45, 0x50, 0x5f, 0x49, 0x52, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10,
	0x04, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x2a, 0x3f, 0x0a,
	0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x2a, 0x4f,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x53, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x4c,
	0x41, 0x4e, 0x41, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x32,
	0x61, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x32,
	0x12, 0x50, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x2e, 0x64, 0x66, 0x75,
	0x73, 0x65, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x21, 0x2e,
	0x64, 0x66, 0x75, 0x73, 0x65, 0x2e, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32,
	0x30, 0x01, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x66,
	0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2f, 0x64, 0x66, 0x75, 0x73, 0x65, 0x2f, 0x62, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x62, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dfuse_bstream_v1_bstream_proto_rawDescOnce sync.Once
	file_dfuse_bstream_v1_bstream_proto_rawDescData = file_dfuse_bstream_v1_bstream_proto_rawDesc
)

func file_dfuse_bstream_v1_bstream_proto_rawDescGZIP() []byte {
	file_dfuse_bstream_v1_bstream_proto_rawDescOnce.Do(func() {
		file_dfuse_bstream_v1_bstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_dfuse_bstream_v1_bstream_proto_rawDescData)
	})
	return file_dfuse_bstream_v1_bstream_proto_rawDescData
}

var file_dfuse_bstream_v1_bstream_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dfuse_bstream_v1_bstream_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_dfuse_bstream_v1_bstream_proto_goTypes = []interface{}{
	(ForkStep)(0),                 // 0: dfuse.bstream.v1.ForkStep
	(BlockDetails)(0),             // 1: dfuse.bstream.v1.BlockDetails
	(Protocol)(0),                 // 2: dfuse.bstream.v1.Protocol
	(*BlocksRequestV2)(nil),       // 3: dfuse.bstream.v1.BlocksRequestV2
	(*BlockResponseV2)(nil),       // 4: dfuse.bstream.v1.BlockResponseV2
	(*Cursor)(nil),                // 5: dfuse.bstream.v1.Cursor
	(*Block)(nil),                 // 6: dfuse.bstream.v1.Block
	(*BlockRef)(nil),              // 7: dfuse.bstream.v1.BlockRef
	(*anypb.Any)(nil),             // 8: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_dfuse_bstream_v1_bstream_proto_depIdxs = []int32{
	0,  // 0: dfuse.bstream.v1.BlocksRequestV2.fork_steps:type_name -> dfuse.bstream.v1.ForkStep
	1,  // 1: dfuse.bstream.v1.BlocksRequestV2.details:type_name -> dfuse.bstream.v1.BlockDetails
	8,  // 2: dfuse.bstream.v1.BlockResponseV2.block:type_name -> google.protobuf.Any
	0,  // 3: dfuse.bstream.v1.BlockResponseV2.step:type_name -> dfuse.bstream.v1.ForkStep
	7,  // 4: dfuse.bstream.v1.Cursor.block:type_name -> dfuse.bstream.v1.BlockRef
	7,  // 5: dfuse.bstream.v1.Cursor.head_block:type_name -> dfuse.bstream.v1.BlockRef
	7,  // 6: dfuse.bstream.v1.Cursor.lib:type_name -> dfuse.bstream.v1.BlockRef
	0,  // 7: dfuse.bstream.v1.Cursor.step:type_name -> dfuse.bstream.v1.ForkStep
	9,  // 8: dfuse.bstream.v1.Block.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 9: dfuse.bstream.v1.Block.payload_kind:type_name -> dfuse.bstream.v1.Protocol
	3,  // 10: dfuse.bstream.v1.BlockStreamV2.Blocks:input_type -> dfuse.bstream.v1.BlocksRequestV2
	4,  // 11: dfuse.bstream.v1.BlockStreamV2.Blocks:output_type -> dfuse.bstream.v1.BlockResponseV2
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_dfuse_bstream_v1_bstream_proto_init() }
func file_dfuse_bstream_v1_bstream_proto_init() {
	if File_dfuse_bstream_v1_bstream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dfuse_bstream_v1_bstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_bstream_v1_bstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_bstream_v1_bstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_bstream_v1_bstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfuse_bstream_v1_bstream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dfuse_bstream_v1_bstream_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dfuse_bstream_v1_bstream_proto_goTypes,
		DependencyIndexes: file_dfuse_bstream_v1_bstream_proto_depIdxs,
		EnumInfos:         file_dfuse_bstream_v1_bstream_proto_enumTypes,
		MessageInfos:      file_dfuse_bstream_v1_bstream_proto_msgTypes,
	}.Build()
	File_dfuse_bstream_v1_bstream_proto = out.File
	file_dfuse_bstream_v1_bstream_proto_rawDesc = nil
	file_dfuse_bstream_v1_bstream_proto_goTypes = nil
	file_dfuse_bstream_v1_bstream_proto_depIdxs = nil
}
