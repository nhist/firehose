// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: dfuse/bstream/v1/bstream.proto

package pbbstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockStreamV2Client is the client API for BlockStreamV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockStreamV2Client interface {
	Blocks(ctx context.Context, in *BlocksRequestV2, opts ...grpc.CallOption) (BlockStreamV2_BlocksClient, error)
}

type blockStreamV2Client struct {
	cc grpc.ClientConnInterface
}

func NewBlockStreamV2Client(cc grpc.ClientConnInterface) BlockStreamV2Client {
	return &blockStreamV2Client{cc}
}

func (c *blockStreamV2Client) Blocks(ctx context.Context, in *BlocksRequestV2, opts ...grpc.CallOption) (BlockStreamV2_BlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockStreamV2_ServiceDesc.Streams[0], "/dfuse.bstream.v1.BlockStreamV2/Blocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStreamV2BlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockStreamV2_BlocksClient interface {
	Recv() (*BlockResponseV2, error)
	grpc.ClientStream
}

type blockStreamV2BlocksClient struct {
	grpc.ClientStream
}

func (x *blockStreamV2BlocksClient) Recv() (*BlockResponseV2, error) {
	m := new(BlockResponseV2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockStreamV2Server is the server API for BlockStreamV2 service.
// All implementations should embed UnimplementedBlockStreamV2Server
// for forward compatibility
type BlockStreamV2Server interface {
	Blocks(*BlocksRequestV2, BlockStreamV2_BlocksServer) error
}

// UnimplementedBlockStreamV2Server should be embedded to have forward compatible implementations.
type UnimplementedBlockStreamV2Server struct {
}

func (UnimplementedBlockStreamV2Server) Blocks(*BlocksRequestV2, BlockStreamV2_BlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}

// UnsafeBlockStreamV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockStreamV2Server will
// result in compilation errors.
type UnsafeBlockStreamV2Server interface {
	mustEmbedUnimplementedBlockStreamV2Server()
}

func RegisterBlockStreamV2Server(s grpc.ServiceRegistrar, srv BlockStreamV2Server) {
	s.RegisterService(&BlockStreamV2_ServiceDesc, srv)
}

func _BlockStreamV2_Blocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlocksRequestV2)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockStreamV2Server).Blocks(m, &blockStreamV2BlocksServer{stream})
}

type BlockStreamV2_BlocksServer interface {
	Send(*BlockResponseV2) error
	grpc.ServerStream
}

type blockStreamV2BlocksServer struct {
	grpc.ServerStream
}

func (x *blockStreamV2BlocksServer) Send(m *BlockResponseV2) error {
	return x.ServerStream.SendMsg(m)
}

// BlockStreamV2_ServiceDesc is the grpc.ServiceDesc for BlockStreamV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockStreamV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.bstream.v1.BlockStreamV2",
	HandlerType: (*BlockStreamV2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Blocks",
			Handler:       _BlockStreamV2_Blocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/bstream/v1/bstream.proto",
}
